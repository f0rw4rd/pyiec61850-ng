name: Build and Release pyiec61850 Wheel

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'libiec61850 version (e.g., v1.6)'
        required: true
        default: 'v1.6'
      publish_pypi:
        description: 'Publish to PyPI'
        required: false
        type: boolean
        default: false

# Add permissions needed for releases
permissions:
  contents: write
  packages: write

jobs:
  build-wheels:
    name: Build wheels for multiple Python versions
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get libiec61850 and package versions
        id: get_version
        run: |
          # Static libiec61850 version - independent of git tags
          LIBIEC61850_VERSION=$(python version.py --libiec61850)
          PACKAGE_VERSION=$(python version.py)
          echo "libiec61850_version=${LIBIEC61850_VERSION}" >> $GITHUB_OUTPUT
          echo "package_version=${PACKAGE_VERSION}" >> $GITHUB_OUTPUT
          echo "Building libiec61850 ${LIBIEC61850_VERSION} as package version ${PACKAGE_VERSION}"

      - name: Create Python-specific Dockerfile
        run: |
          # Use bookworm for newer Python versions, bullseye for older ones
          if [[ "${{ matrix.python-version }}" == "3.8" || "${{ matrix.python-version }}" == "3.9" ]]; then
            BASE_IMAGE="python:${{ matrix.python-version }}-slim-bullseye"
          else
            BASE_IMAGE="python:${{ matrix.python-version }}-slim-bookworm"
          fi
          
          cat > Dockerfile.py${{ matrix.python-version }} << EOF
          FROM $BASE_IMAGE AS builder

          # Set libiec61850 version as a build argument
          ARG LIBIEC61850_VERSION=${{ steps.get_version.outputs.libiec61850_version }}

          # Install build dependencies with retry logic for network issues
          RUN apt-get update && \\
              for i in 1 2 3; do \\
                  apt-get install -y --fix-missing --no-install-recommends \\
                      git \\
                      build-essential \\
                      cmake \\
                      swig \\
                      python3-dev \\
                      python3-setuptools \\
                      python3-wheel \\
                      python3-pip \\
                      wget tar \\
                  && break || { echo "Attempt \$i failed, retrying in 10s..."; sleep 10; }; \\
              done && \\
              rm -rf /var/lib/apt/lists/*

          # Create working directory
          WORKDIR /build

          # Clone libiec61850 with specified version
          RUN echo "Building libiec61850 version: \$LIBIEC61850_VERSION" && \\
              git clone --depth 1 --branch \$LIBIEC61850_VERSION https://github.com/mz-automation/libiec61850.git

          # Download mbedTLS directly
          RUN cd libiec61850/third_party/mbedtls && \\
              wget https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v3.6.0.tar.gz --no-check-certificate && \\
              tar -xzf v3.6.0.tar.gz

          # Copy patch files
          COPY patches/ /build/patches/

          # Apply patches
          RUN cd /build/libiec61850 && \\
              if [ -f /build/patches/iec61850.i.patch ]; then \\
                  IEC_FILE=\$(find . -name "iec61850.i") && \\
                  echo "Applying patch to \$IEC_FILE" && \\
                  patch -p1 \$IEC_FILE < /build/patches/iec61850.i.patch; \\
              fi

          # Build libiec61850 with Python bindings
          WORKDIR /build/libiec61850
          RUN mkdir -p build && \\
              cd build && \\
              cmake -DCMAKE_INSTALL_PREFIX=/usr \\
                    -DBUILD_PYTHON_BINDINGS=ON \\
                    .. && \\
              make WITH_MBEDTLS3=1 -j\$(nproc) && \\
              make install

          # Create a Python package for pyiec61850
          WORKDIR /build/pyiec61850-package
          RUN mkdir -p pyiec61850

          # Copy project files for wheel building
          COPY setup_wheel.py README.md /build/pyiec61850-package/
          RUN mv setup_wheel.py setup.py

          # Copy Python modules and libraries
          RUN cp -r /build/libiec61850/build/pyiec61850/* pyiec61850/ && \\
              cp /build/libiec61850/build/src/libiec61850.so* pyiec61850/

          # Create package initialization file
          RUN echo "import os, sys, ctypes" > pyiec61850/__init__.py && \\
              echo "_package_dir = os.path.dirname(os.path.abspath(__file__))" >> pyiec61850/__init__.py && \\
              echo "for lib_file in os.listdir(_package_dir):" >> pyiec61850/__init__.py && \\
              echo "    if lib_file.startswith('libiec61850.so'):" >> pyiec61850/__init__.py && \\
              echo "        try:" >> pyiec61850/__init__.py && \\
              echo "            lib_path = os.path.join(_package_dir, lib_file)" >> pyiec61850/__init__.py && \\
              echo "            ctypes.CDLL(lib_path)" >> pyiec61850/__init__.py && \\
              echo "            break" >> pyiec61850/__init__.py && \\
              echo "        except Exception as e:" >> pyiec61850/__init__.py && \\
              echo "            print(f'Warning: Failed to load {lib_file}: {e}')" >> pyiec61850/__init__.py

          # Build wheel with version from environment
          RUN pip install wheel setuptools && \\
              PACKAGE_VERSION=${{ steps.get_version.outputs.package_version }} python setup.py bdist_wheel

          # Final stage - use slim base image instead of scratch to enable docker create/cp
          FROM $BASE_IMAGE
          WORKDIR /wheels
          COPY --from=builder /build/pyiec61850-package/dist/*.whl /wheels/
          EOF

      - name: Build wheel for Python ${{ matrix.python-version }}
        run: |
          docker build -f Dockerfile.py${{ matrix.python-version }} -t pyiec61850-py${{ matrix.python-version }} --build-arg LIBIEC61850_VERSION=${{ steps.get_version.outputs.libiec61850_version }} .

      - name: Extract wheel from Docker image
        run: |
          mkdir -p ./dist-py${{ matrix.python-version }}
          docker create --name wheel-container-py${{ matrix.python-version }} pyiec61850-py${{ matrix.python-version }}
          docker cp wheel-container-py${{ matrix.python-version }}:/wheels/. ./dist-py${{ matrix.python-version }}/
          docker rm wheel-container-py${{ matrix.python-version }}

      - name: Display built wheel files
        run: |
          ls -la ./dist-py${{ matrix.python-version }}/
          
      - name: Upload wheel as artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheels-py${{ matrix.python-version }}
          path: ./dist-py${{ matrix.python-version }}/*.whl

  create-release:
    name: Create GitHub Release
    needs: [build-wheels]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref_type == 'tag'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get package version
        id: get_version
        run: |
          PACKAGE_VERSION=$(python version.py)
          LIBIEC61850_VERSION=$(python version.py --libiec61850)
          echo "package_version=${PACKAGE_VERSION}" >> $GITHUB_OUTPUT
          echo "libiec61850_version=${LIBIEC61850_VERSION}" >> $GITHUB_OUTPUT

      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-wheels

      - name: Organize wheels
        run: |
          mkdir -p ./dist
          find all-wheels -name "*.whl" -exec cp {} ./dist/ \;
          ls -la ./dist/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./dist/*.whl
          body: |
            Python wheels for libiec61850 ${{ steps.get_version.outputs.libiec61850_version }} (Package version: ${{ steps.get_version.outputs.package_version }})
            
            ## Supported Python Versions
            - Python 3.8, 3.9, 3.10, 3.11, 3.12, 3.13 (Linux x86_64)
            
            ## Installation
            
            ### From PyPI (recommended)
            ```bash
            pip install pyiec61850-ng
            ```
            
            ### From GitHub Release
            ```bash
            pip install pyiec61850-ng --find-links https://github.com/f0rw4rd/pyiec61850-ng/releases/download/${{ github.ref_name }}/
            ```
            
            Or install directly from GitHub:
            ```bash
            pip install git+https://github.com/f0rw4rd/pyiec61850-ng.git
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-to-pypi:
    name: Publish to PyPI
    needs: [build-wheels]
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && github.ref_type == 'tag') ||
      (github.event.inputs.publish_pypi == 'true')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-wheels

      - name: Organize wheels
        run: |
          mkdir -p ./dist
          find all-wheels -name "*.whl" -exec cp {} ./dist/ \;
          ls -la ./dist/

      - name: Fix wheel platform tags for PyPI
        run: |
          # Install wheel tool to modify platform tags
          pip install wheel
          
          # Convert linux_x86_64 to manylinux1_x86_64 for PyPI compatibility
          for wheel in ./dist/*linux_x86_64.whl; do
            if [ -f "$wheel" ]; then
              new_name=$(echo "$wheel" | sed 's/linux_x86_64/manylinux1_x86_64/')
              mv "$wheel" "$new_name"
              echo "Renamed: $(basename "$wheel") -> $(basename "$new_name")"
            fi
          done
          
          # Show final wheel names
          ls -la ./dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: ./dist/
          skip-existing: true
          verbose: true